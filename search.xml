<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Semantic Instance Segmentation with a Discriminative Loss Function论文笔记</title>
    <url>/2020/10/04/Semantic-Instance-Segmentation-with-a-Discriminative-Loss-Function%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本文主要提出了一种新的实例分割方法，通过神经网络将每个像素映射到特征空间中的一个点，再用聚类的方式将这些点划分给不同的实例。与原有的方法相比，本方法没有使用先找出候选目标、RNN机制等方法，更加简单，且实现了不错的结果。</p>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>为了达到聚类正确的目的，本文提出的损失函数包括以下3项：</p>
<ul>
<li><strong>variance term:</strong> 将属于同一个实例的像素对应的embedding拉向这个实例的聚类中心</li>
<li><strong>distance term:</strong>  增大不同簇的中心的距离</li>
<li><strong>regularization term:</strong> 让所有的簇有靠近原点的趋势</li>
</ul>
<img src="/.com//10/04/Semantic-Instance-Segmentation-with-a-Discriminative-Loss-Function%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/image-20201004202408378.png" class title="名字">

<p>最终的表达式如下所示：</p>
<p><img src="/.com//Semantic-Instance-Segmentation-with-a-Discriminative-Loss-Function%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%5Cimage-20201004194905556.png" alt="损失函数"></p>
<p>其中</p>
<p>$C$: GT中簇的个数（即实例的个数）</p>
<p>$N_c$: 簇c中元素的个数（即属于某个实例的像素点个数）</p>
<p>$x_i$: 一个embedding</p>
<p>$\mu_c$: 簇c的聚类中心</p>
<p>$[x]_+$: $max(0, x)$</p>
<p>$||·||$: $L1$或$L2$范数</p>
<h4 id="后处理"><a href="#后处理" class="headerlink" title="后处理"></a>后处理</h4><p>当$L_{var}$与$L_{dist}$这两项收敛为0时：</p>
<ul>
<li>同一实例的所有embedding到其聚类中心的距离小于等于$\delta_v$</li>
<li>不同实例的聚类中心的距离大于等于$2\delta_d$</li>
</ul>
<p>则当$\delta_d&gt;\delta_v$时，每个embedding均落在距离其聚类中心不超过阈值$b=\delta_v$的范围（超球面）内，即：<br>$$<br>x_i \in C \Leftrightarrow ||x_i-x_c&lt;b||<br>$$<br>到簇C的聚类中心$x_c$距离小于阈值$b=\delta_v$的embedding $x_i$，一定属于簇C。</p>
<p><strong>但是对于实例分割而言</strong>，每张图片实例的个数是不确定的，因此不能简单的记录聚类中心和阈值用于推理。于是作者采用了新的策略。</p>
<p>为便于表述，用$D$表示类间点距离，$d$表示类内点距离。对于embedding得到的点，可以发现，<strong>当$\delta_d&gt;2\delta_v$时</strong>，最小类间距离为$D_{min}=2\delta_d-2\delta_v&gt;2\delta_v=d_{max}$（同一实例簇的直径为$2\delta_v$，即为类内最大距离），即$D_{min}&gt;d_{max}$。故此时任选一个点，它到所有同实例点的距离，比到所有不同实例点的距离都要近。</p>
<p>在此情况下，理想状态时，在推理中任取阈值b满足$d_{max}\leq b &lt; D_{min}$ ，任选一个未分类的点，以b为半径做超球面，在此范围内的点都属于同一实例。重复此过程直到确定所有点的归属即可完成聚类。</p>
<p><strong>为了增加鲁棒性</strong>，在推理时采用<strong>mean-shift算法</strong>而不是直接对每个点作超球面划分实例。该算法流程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(存在未分类的点)：</span><br><span class="line">	任取一个未分类的点p;</span><br><span class="line">    center = p;</span><br><span class="line">    Do:</span><br><span class="line">        <span class="number">1.</span> 取以center为圆心，半径为b的超球面内所有点构成点集C</span><br><span class="line">        <span class="number">2.</span> 计算C中所有点的中心mean</span><br><span class="line">        <span class="number">3.</span> 若center==mean，点集C划分为一个实例,<span class="keyword">continue</span>; 否则，center=mean, go to <span class="number">1.</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>hello</title>
    <url>/2020/10/03/hello/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
